// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/database/session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/NunChatSpace/7-solutions-backend-challenge/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockISessionRepository is a mock of ISessionRepository interface.
type MockISessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepositoryMockRecorder
}

// MockISessionRepositoryMockRecorder is the mock recorder for MockISessionRepository.
type MockISessionRepositoryMockRecorder struct {
	mock *MockISessionRepository
}

// NewMockISessionRepository creates a new mock instance.
func NewMockISessionRepository(ctrl *gomock.Controller) *MockISessionRepository {
	mock := &MockISessionRepository{ctrl: ctrl}
	mock.recorder = &MockISessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepository) EXPECT() *MockISessionRepositoryMockRecorder {
	return m.recorder
}

// GetSessionByID mocks base method.
func (m *MockISessionRepository) GetSessionByID(id string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", id)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockISessionRepositoryMockRecorder) GetSessionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockISessionRepository)(nil).GetSessionByID), id)
}

// InsertSession mocks base method.
func (m *MockISessionRepository) InsertSession(session *domain.Session) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSession", session)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSession indicates an expected call of InsertSession.
func (mr *MockISessionRepositoryMockRecorder) InsertSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSession", reflect.TypeOf((*MockISessionRepository)(nil).InsertSession), session)
}

// TerminateSession mocks base method.
func (m *MockISessionRepository) TerminateSession(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSession", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateSession indicates an expected call of TerminateSession.
func (mr *MockISessionRepositoryMockRecorder) TerminateSession(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSession", reflect.TypeOf((*MockISessionRepository)(nil).TerminateSession), id)
}

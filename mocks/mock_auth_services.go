// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/services/auth_services/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/NunChatSpace/7-solutions-backend-challenge/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIAuthSerivce is a mock of IAuthSerivce interface.
type MockIAuthSerivce struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthSerivceMockRecorder
}

// MockIAuthSerivceMockRecorder is the mock recorder for MockIAuthSerivce.
type MockIAuthSerivceMockRecorder struct {
	mock *MockIAuthSerivce
}

// NewMockIAuthSerivce creates a new mock instance.
func NewMockIAuthSerivce(ctrl *gomock.Controller) *MockIAuthSerivce {
	mock := &MockIAuthSerivce{ctrl: ctrl}
	mock.recorder = &MockIAuthSerivceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthSerivce) EXPECT() *MockIAuthSerivceMockRecorder {
	return m.recorder
}

// DecodeToken mocks base method.
func (m *MockIAuthSerivce) DecodeToken(token string) (*domain.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeToken", token)
	ret0, _ := ret[0].(*domain.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeToken indicates an expected call of DecodeToken.
func (mr *MockIAuthSerivceMockRecorder) DecodeToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeToken", reflect.TypeOf((*MockIAuthSerivce)(nil).DecodeToken), token)
}

// EncodeToken mocks base method.
func (m *MockIAuthSerivce) EncodeToken(tokenInfo domain.TokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeToken", tokenInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeToken indicates an expected call of EncodeToken.
func (mr *MockIAuthSerivceMockRecorder) EncodeToken(tokenInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeToken", reflect.TypeOf((*MockIAuthSerivce)(nil).EncodeToken), tokenInfo)
}

// GenerateAccessToken mocks base method.
func (m *MockIAuthSerivce) GenerateAccessToken(tokenInfo domain.TokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", tokenInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockIAuthSerivceMockRecorder) GenerateAccessToken(tokenInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockIAuthSerivce)(nil).GenerateAccessToken), tokenInfo)
}

// GenerateRefreshToken mocks base method.
func (m *MockIAuthSerivce) GenerateRefreshToken(tokenInfo domain.TokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", tokenInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockIAuthSerivceMockRecorder) GenerateRefreshToken(tokenInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockIAuthSerivce)(nil).GenerateRefreshToken), tokenInfo)
}

// GenerateTokens mocks base method.
func (m *MockIAuthSerivce) GenerateTokens(tokenInfo domain.TokenInfo) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", tokenInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockIAuthSerivceMockRecorder) GenerateTokens(tokenInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockIAuthSerivce)(nil).GenerateTokens), tokenInfo)
}

// ValidateAccessToken mocks base method.
func (m *MockIAuthSerivce) ValidateAccessToken(arg0 domain.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockIAuthSerivceMockRecorder) ValidateAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockIAuthSerivce)(nil).ValidateAccessToken), arg0)
}

// ValidateRefreshToken mocks base method.
func (m *MockIAuthSerivce) ValidateRefreshToken(arg0 domain.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockIAuthSerivceMockRecorder) ValidateRefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockIAuthSerivce)(nil).ValidateRefreshToken), arg0)
}

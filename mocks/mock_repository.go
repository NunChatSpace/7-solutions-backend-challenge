// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/database/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	database "github.com/NunChatSpace/7-solutions-backend-challenge/internal/adapter/database"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Session mocks base method.
func (m *MockRepository) Session() database.ISessionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(database.ISessionRepository)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockRepositoryMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockRepository)(nil).Session))
}

// User mocks base method.
func (m *MockRepository) User() database.IUserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(database.IUserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepository)(nil).User))
}

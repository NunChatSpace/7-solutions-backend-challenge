// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/services/session_services/session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/NunChatSpace/7-solutions-backend-challenge/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockISessionService is a mock of ISessionService interface.
type MockISessionService struct {
	ctrl     *gomock.Controller
	recorder *MockISessionServiceMockRecorder
}

// MockISessionServiceMockRecorder is the mock recorder for MockISessionService.
type MockISessionServiceMockRecorder struct {
	mock *MockISessionService
}

// NewMockISessionService creates a new mock instance.
func NewMockISessionService(ctrl *gomock.Controller) *MockISessionService {
	mock := &MockISessionService{ctrl: ctrl}
	mock.recorder = &MockISessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionService) EXPECT() *MockISessionServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockISessionService) CreateSession(userID string) (*domain.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", userID)
	ret0, _ := ret[0].(*domain.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockISessionServiceMockRecorder) CreateSession(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockISessionService)(nil).CreateSession), userID)
}

// GetSessionByID mocks base method.
func (m *MockISessionService) GetSessionByID(id string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", id)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockISessionServiceMockRecorder) GetSessionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockISessionService)(nil).GetSessionByID), id)
}

// TerminateSession mocks base method.
func (m *MockISessionService) TerminateSession(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSession", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateSession indicates an expected call of TerminateSession.
func (mr *MockISessionServiceMockRecorder) TerminateSession(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSession", reflect.TypeOf((*MockISessionService)(nil).TerminateSession), id)
}
